#!/usr/bin/env python

"""
Tired of having to go into each sub dir to find out whether or
not you did a git commit? Tire no more, just use this!

Original Author:   Mike Pearce <mike@mikepearce.net> [18/05/2010]

TODO:
    * ncurses based UI
        * Allow sorting etc.
    * Use pylibgit2
    * Store list of git repositories in a .txt
        * and present status of all of them on 'git multi'
"""

import sys
import os
import datetime
import glob

import commands
from optparse import OptionParser

# Setup some stuff
dirname = './'
gitted = False
mini = True


def modification_date(filename):
    t = os.path.getmtime(filename)
    d = datetime.datetime.fromtimestamp(t)
    return d.strftime(r'%d/%m/%Y')


class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''

parser = OptionParser()
parser.add_option(
    "-d",
    "--dir",
    dest="dirname",
    action="store",
    help="The directory to parse sub dirs from",
    default=os.path.abspath("./")+"/"
)

# Parse the args
(options, args) = parser.parse_args()

#-------------------


def show_error(error="Undefined Error!"):
    #-------------------
    """Writes an error to stderr"""
    sys.stderr.write(error)
    sys.exit(1)


if __name__ == "__main__":
    os.environ['LANGUAGE'] = 'en_US:en'
    os.environ['LANG'] = 'en_US.UTF-8'

    write = sys.stdout.write
    write("\n")

    for infile in glob.glob(os.path.join(options.dirname, '*')):

        # is there a .git file
        if os.path.exists(os.path.join(infile, ".git")):

            # Yay, we found one!
            gitted = True

            # OK, contains a .git file. Let's descend into it
            # and ask git for a status
            out = commands.getoutput('cd ' + infile + '; git status')

            j = out.find('On branch')
            k = out.find('\n', j)
            branch = out[j+10:k]
            branchColor = bcolors.WARNING

            if branch == 'master':
                branchColor = bcolors.OKGREEN

            if -1 != out.find('nothing'):
                changes = bcolors.OKGREEN + "No Changes" + bcolors.ENDC
            else:
                changes = bcolors.FAIL + "Changes" + bcolors.ENDC

            # Write to screen
            write("> " +
                  bcolors.OKBLUE + infile.ljust(30) + bcolors.ENDC +
                  "[ " + branchColor + branch.ljust(15) + bcolors.ENDC + " ]" + " : " +
                  changes.ljust(25) + " : " +
                  modification_date(infile) +
                  "\n"
                  )

            # Come out of the dir and into the next
            commands.getoutput('cd ../')

    if False == gitted:
        show_error("Error: None of those sub directories had a .git file.\n")
