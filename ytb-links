#!/usr/bin/env python3

"""Get Video links from a Youtube Playlist URL.

The output is in a format that can be fed into youtube-dl via the -a switch.

Usage:
    ytb-links <playlist_url>
    ytb-links <playlist_url> -f <file>

Examples:

    ytb-links https://www.youtube.com/playlist?list=PL8B24C31197EC371C

    ytb-links https://www.youtube.com/playlist?list=PL8B24C31197EC371C > playlist

    You can then manually edit the playlist file and comment videos that you
    don't want to download. After you're done just pass the list to youtube-dl

    youtube-dl -a playlist
"""

import re

import docopt
import pyquery

HEADER = """
# {title}
# {url}"""

VIDEO = """
# {time} - {title}
https://youtube.com{url}"""


def get_video_links(playlist_url, file=None):

    if file is not None:
        with open(file) as inp:
            html = inp.read()

        pq = pyquery.PyQuery(html)
    else:
        pq = pyquery.PyQuery(url=playlist_url)

    title = pq('h1.pl-header-title')
    links = pq('td.pl-video-title > a')
    times = pq('td.pl-video-time span')

    print(HEADER.format(title=title.text(), url=playlist_url))
    print('#' * (len(playlist_url) + 2))

    for link, time in zip(links, times):
        url = re.sub(r'&list=[\w-]+', '', link.get('href'))
        print(VIDEO.format(time=time.text, title=link.text.strip(), url=url))


if __name__ == '__main__':
    args = docopt.docopt(__doc__)

    if args['<playlist_url>']:
        if args['-f']:
            get_video_links(args['<playlist_url>'], file=args['<file>'])
        else:
            get_video_links(args['<playlist_url>'])
